@startuml
class Camera {
  - lookFrom: Triplet
  - lookAt: Triplet
  - up: Triplet
  - fov: int

  + Camera(lookFrom: Triplet, lookAt: Triplet, up: Triplet, fov: int)
  + getLookFrom(): Triplet
  + setLookFrom(lookFrom: Triplet): void
  + getLookAt(): Triplet
  + setLookAt(lookAt: Triplet): void
  + getUp(): Triplet
  + setUp(up: Triplet): void
  + getFov(): int
  + setFov(fov: int): void
}

class Color {
  - triplet: Triplet

  + Color(x: double, y: double, z: double)
  + Color(tri: Triplet)
  + getTriplet(): Triplet
  + add(tri: Color): Color
  + multiply(scalar: double): Color
  + multiply(vec: Color): Color
}

class Triplet {
  - x: double
  - y: double
  - z: double

  + Triplet(x: double, y: double, z: double)
  + getX(): double
  + getY(): double
  + getZ(): double
  + add(vec: Triplet): Triplet
  + multiply(scalar: double): Triplet
}


class DirectionalLight {
  - color: Color
  - direction: Vector

  + DirectionalLight(color: Color, direction: Vector)
  + getColor(): Color
  + getPosition(): Vector
}

class Vector {
  - x: double
  - y: double
  - z: double

  + Vector(x: double, y: double, z: double)
  + getX(): double
  + getY(): double
  + getZ(): double
}

interface ILight {
  + getColor(): Color

}

class Image {
  - ImageWidth: int
  - ImageHeight: int
  - ImageName: String = "output.png"

  + Image(ImageWidth: int, ImageHeight: int, ImageName: String)
  + getImageWidth(): int
  + setImageWidth(ImageWidth: int): void
  + getImageHeight(): int
  + setImageHeight(ImageHeight: int): void
  + getImageName(): String
  + setImageName(ImageName: String): void
}

class Plan {
  - origine: Triplet

  + Plan()
}

class Point {
  - triplet: Triplet

  + Point(x: int, y: int, z: int)
  + Point(tri: Triplet)
  + getTriplet(): Triplet
  + subtract(tri: Point): Vector
  + multiply(scalar: float): Point
}

class PonctualLight {
  - color: Color
  - position: Point

  + PonctualLight(color: Color, position: Point)
  + getColor(): Color
  + getPosition(): Point
}

class RunParser {
  + main(args: String[]): void
}

class Parser {
  + parse(fileName: String): void
}

class Scene {
  - camera: Camera
  - image: Image
  - colors: ArrayList<Color>
  - objets: List<IObjetScene>

  + Scene(b: SceneBuilder)
  + getCamera(): Camera
  + setCamera(camera: Camera): void
  + getImage(): Image
  + setImage(image: Image): void
  + getColors(): ArrayList<Color>
  + setColors(colors: ArrayList<Color>): void
  + getObjets(): List<IObjetScene>
  + setObjets(objets: List<IObjetScene>): void
}

class SceneBuilder {
  - camera: Camera
  - image: Image
  - colors: ArrayList<Color>
  - objets: List<IObjetScene>

  + SceneBuilder()
  + newInstance(): SceneBuilder
  + withCamera(cam: Camera): void
  + getCamera(): Camera
  + withImage(img: Image): void
  + getImage(): Image
  + withColors(colors: ArrayList<Color>): void
  + getColors(): ArrayList<Color>
  + withObjets(objets: List<IObjetScene>): void
  + getObjets(): List<IObjetScene>
  + build(): Scene
}

class Sphere {
  - origine: Triplet
  - ray: double

  + Sphere(origine: Triplet, ray: double)
  + getOrigine(): Triplet
  + setOrigine(origine: Triplet): void
  + getRay(): double
  + setRay(ray: double): void
  + getDiameter(): double
  + getCircumference(): double
  + getVolume(): double
}

class Triangle {
  - a: Point
  - b: Point
  - c: Point

  + Triangle(a: Point, b: Point, c: Point)
  + getA(): Point
  + setA(a: Point): void
  + getB(): Point
  + setB(b: Point): void
  + getC(): Point
  + setC(c: Point): void
  + getDistanceAB(): double
  + getDistanceAC(): double
  + getDistanceBC(): double
}

class Vector {
  - triplet: Triplet

  + Vector(x: double, y: double, z: double)
  + Vector(tri: Triplet)
  + getTriplet(): Triplet
  + add(tri: Vector): Vector
  + add(tri: Point): Point
  + subtract(tri: Vector): Vector
  + multiply(scalar: float): Vector
  + multiply(vec: Vector): Vector
  + multiplyVectorial(vec: Vector): Vector
  + length(): double
  + normalize(): Vector
}

class Parser {
  - height: int
  - width: int
  - image: String
  - camera: ArrayList<Triplet>
  - fov: int
  - colors: ArrayList<Color>
  - dl: DirectionalLight
  - pl: PonctualLight
  - maxvert: int
  - points: Point[]
  - triangles: ArrayList<Triangle>
  - spheres: ArrayList<Sphere>
  - plans: ArrayList<Plan>

  + getHeight(): int
  + setHeight(height: int): void
  + getWidth(): int
  + setWidth(width: int): void
  + getImage(): String
  + setImage(image: String): void
  + getCamera(): ArrayList<Triplet>
  + setCamera(camera: ArrayList<Triplet>): void
  + getFov(): int
  + setFov(fov: int): void
  + getColors(): ArrayList<Color>
  + setColors(colors: ArrayList<Color>): void
  + getDl(): DirectionalLight
  + setDl(dl: DirectionalLight): void
  + getPl(): PonctualLight
  + setPl(pl: PonctualLight): void
  + getMaxvert(): int
  + setMaxvert(maxvert: int): void
  + setPoints(column: int): void
  + getPoints(): Point[]
  + getTriangles(): ArrayList<Triangle>
  + getSpheres(): ArrayList<Sphere>
  + getPlans(): ArrayList<Plan>
  + parse(nomFile: String): void
  + toString(): String
  + main(arg: String[]): void
}

Parser --|> Triplet
Parser --|> Color
Parser --|> DirectionalLight
Parser --|> PonctualLight
Parser --|> Point
Parser --|> Vector
Parser --|> Triangle
Parser --|> Sphere
Parser --|> Plan

Vector --|> Triplet
Vector --|> Point

Triangle --|> Point
Triangle --|> Triplet

Sphere --|> Triplet

SceneBuilder -- Camera
SceneBuilder -- Image
SceneBuilder -- Color
SceneBuilder -- IObjetScene

RunParser -- Parser

Scene --|> Camera
Scene --|> Image
Scene --|> Color
Scene --|> IObjetScene

DirectionalLight --|> ILight
DirectionalLight -- Color
DirectionalLight -- Vector

PonctualLight --|> ILight
PonctualLight -- Color
PonctualLight -- Point

Plan -- Triplet

Point --|> Triplet
Point -- Vector

Color --|> Triplet
@enduml