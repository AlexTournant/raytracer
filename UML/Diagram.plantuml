@startuml

!theme plain
top to bottom direction
skinparam linetype ortho

class ActivateShadows {
  + ActivateShadows(): 
  + activateShadows(Shadow): void
}
interface Builder << interface >> {
  + withLights(ArrayList<ILight>): void
  + withCamera(Camera): void
  + withColors(Map<String, Color>): void
  + withImage(Image): void
  + withObjets(Map<IObjetScene, IColorStrategy>): void
  + build(): Scene
}
class Camera {
  + Camera(Point, Point, Vector, int): 
  - up: Vector
  - lookFrom: Point
  - lookAt: Point
  - fov: int
   up: Vector
   lookFrom: Point
   lookAt: Point
   fov: int
}
class Color {
  + Color(double, double, double): 
  + Color(Triplet): 
  - triplet: Triplet
  + add(Color): Color
  + scalarMultiply(double): Color
  + shurProduct(Color): Color
   triplet: Triplet
}
class ColorDamier {
  + ColorDamier(Color, Color, int): 
  + getColor(int, int): Color
}
class ColorUnie {
  + ColorUnie(Color): 
  + getColor(int, int): Color
}
class DeactivateShadows {
  + DeactivateShadows(): 
  + activateShadows(Shadow): void
}
class DimensionPixel {
  + DimensionPixel(int, int, int): 
}
class DirectionalLight {
  + DirectionalLight(Color, Vector): 
  - color: Color
  - direction: Vector
   position: Point
   color: Color
   direction: Vector
}
interface ICalculStrategy << interface >> {
  + rayTracing(): void
}
interface IColorStrategy << interface >> {
  + getColor(int, int): Color
}
interface IColorStrategy << interface >> {
  + getColor(int, int): Color
}
interface ILight << interface >> {
   position: Point
   color: Color
   direction: Vector
}
interface IObjetScene << interface >> {
  + getN(Point): Vector
  + intersection(Point, Vector): double
   origine: Point
}
interface IShadowState << interface >> {
  + activateShadows(Shadow): void
}
class Image {
  + Image(int, int, String): 
  - ImageWidth: int
  - ImageHeight: int
  - ImageName: String
   ImageHeight: int
   ImageName: String
   ImageWidth: int
}
class Lambert {
  + Lambert(Scene): 
  - imgwidth: int
  - imgheight: int
  - scene: Scene
  + getD(int, int): Vector
  + orthonormalW(): Vector
  + sumColor(IObjetScene, Point): Color
  + rayTracing(): void
  + orthonormalV(): Vector
  + getCol(Point, IObjetScene, int, int): Color
  + convertModelColorToAwtColor(double, double, double): int
  + orthonormalU(): Vector
  + plusProche(Map<IObjetScene, Double>): Map<IObjetScene, Double>
   scene: Scene
   pixelHeight: double
   realWidth: double
   realHeight: double
   fovr: double
   pixelWidth: double
   imgheight: int
   imgwidth: int
}
class Main {
  + Main(): 
  + main(String[]): void
}
class Normal {
  + Normal(Scene): 
  - imgwidth: int
  - scene: Scene
  - imgheight: int
  + orthonormalU(): Vector
  + orthonormalV(): Vector
  + orthonormalW(): Vector
  + getD(int, int): Vector
  + rayTracing(): void
  + convertModelColorToAwtColor(double, double, double): int
   scene: Scene
   pixelHeight: double
   realWidth: double
   realHeight: double
   fovr: double
   pixelWidth: double
   imgheight: int
   imgwidth: int
}
class Parser {
  + Parser(): 
  - colorDamier: ColorDamier
  - spheres: ArrayList<Sphere>
  - listLights: ArrayList<ILight>
  - triangles: ArrayList<Triangle>
  - colors: Map<String, Color>
  - occ: int
  - shadowOn: boolean
  - check: boolean
  - taille: int
  - plans: ArrayList<Plan>
  - sb: SceneBuilder
  - nomImage: String
  - maxvert: int
  - points: Point[]
  - TCamera: ArrayList<Triplet>
  - image: ArrayList<Image>
  - diffuse: Map<IObjetScene, IColorStrategy>
  - height: int
  - cameras: ArrayList<Camera>
  - fov: int
  - width: int
  + setOcc(): void
  + init(): void
  + setPoints(int): void
  + parse(String): void
   sb: SceneBuilder
   shadowOn: boolean
   image: ArrayList<Image>
   triangles: ArrayList<Triangle>
   TCamera: ArrayList<Triplet>
   width: int
   nomImage: String
   spheres: ArrayList<Sphere>
   taille: int
   occ: int
   plans: ArrayList<Plan>
   check: boolean
   fov: int
   colors: Map<String, Color>
   height: int
   colorDamier: ColorDamier
   points: Point[]
   cameras: ArrayList<Camera>
   maxvert: int
   diffuse: Map<IObjetScene, IColorStrategy>
   camera: Camera
   listLights: ArrayList<ILight>
}
class Plan {
  + Plan(Point, Vector): 
  - normal: Vector
  - origine: Point
  + getN(Point): Vector
  + intersection(Point, Vector): double
   origine: Point
   rayon: double
   normal: Vector
}
class Point {
  + Point(Triplet): 
  + Point(double, double, double): 
  - triplet: Triplet
  + subtract(Point): Vector
  + scalarMultiply(double): Point
   triplet: Triplet
}
class PonctualLight {
  + PonctualLight(Color, Point): 
  - position: Point
  - color: Color
   position: Point
   color: Color
   direction: Vector
}
class Scene {
  + Scene(Camera, Image, Map<String, Color>, Map<IObjetScene, IColorStrategy>, ArrayList<ILight>): 
  - camera: Camera
  - lights: ArrayList<ILight>
  - image: Image
  - colors: Map<String, Color>
  - objets: Map<IObjetScene, IColorStrategy>
   lights: ArrayList<ILight>
   image: Image
   objets: Map<IObjetScene, IColorStrategy>
   camera: Camera
   colors: Map<String, Color>
}
class SceneBuilder {
  + SceneBuilder(): 
  + withImage(Image): void
  + withCamera(Camera): void
  + withColors(Map<String, Color>): void
  + withObjets(Map<IObjetScene, IColorStrategy>): void
  + build(): Scene
  + withLights(ArrayList<ILight>): void
}
class Shadow {
  + Shadow(): 
  - state: IShadowState
  + handle(): void
   state: IShadowState
}
class Sphere {
  + Sphere(Point, double): 
  - ray: double
  - origine: Point
  - color: Color
  + intersection(Point, Vector): double
  + getN(Point): Vector
   ray: double
   color: Color
   rayon: double
   volume: double
   circumference: double
   diameter: double
   origine: Point
}
class Triangle {
  + Triangle(Point, Point, Point): 
  - origine: Point
  - c: Point
  - b: Point
  + getN(Point): Vector
  + intersection(Point, Vector): double
   rayon: double
   b: Point
   distanceAB: double
   distanceBC: double
   c: Point
   distanceAC: double
   origine: Point
}
class Triplet {
  + Triplet(double, double, double): 
  - x: double
  - y: double
  - z: double
  + add(Triplet): Triplet
  + shurProduct(Triplet): Triplet
  + scalarMultiply(double): Triplet
  + scalarProduct(Triplet): double
  + length(): double
  + multiplyVectorial(Triplet): Triplet
  + subtract(Triplet): Triplet
  + normalize(): Triplet
   x: double
   y: double
   z: double
}
class Vector {
  + Vector(Triplet): 
  + Vector(double, double, double): 
  - triplet: Triplet
  + scalarMultiply(double): Vector
  + subtract(Vector): Vector
  + add(Vector): Vector
  + scalarProduct(Vector): double
  + add(Point): Point
  + multiplyVectorial(Vector): Vector
  + length(): double
  + normalize(): Vector
   triplet: Triplet
}

ActivateShadows    -[#595959,dashed]->  DeactivateShadows : "«create»"
ActivateShadows    -[#008200,dashed]-^  IShadowState      
Camera            "1" *-[#595959,plain]-> "lookFrom\n1" Point             
Camera            "1" *-[#595959,plain]-> "up\n1" Vector            
Color              -[#595959,dashed]->  Triplet           : "«create»"
Color             "1" *-[#595959,plain]-> "triplet\n1" Triplet           
ColorDamier       "1" *-[#595959,plain]-> "color1\n1" Color             
ColorDamier        -[#008200,dashed]-^  IColorStrategy    
ColorUnie         "1" *-[#595959,plain]-> "color\n1" Color             
ColorUnie          -[#008200,dashed]-^  IColorStrategy    
DeactivateShadows  -[#595959,dashed]->  ActivateShadows   : "«create»"
DeactivateShadows  -[#008200,dashed]-^  IShadowState      
DirectionalLight  "1" *-[#595959,plain]-> "color\n1" Color             
DirectionalLight   -[#008200,dashed]-^  ILight            
DirectionalLight  "1" *-[#595959,plain]-> "direction\n1" Vector            
Lambert            -[#595959,dashed]->  Color             : "«create»"
Lambert            -[#008200,dashed]-^  ICalculStrategy   
Lambert            -[#595959,dashed]->  Point             : "«create»"
Lambert           "1" *-[#595959,plain]-> "scene\n1" Scene             
Lambert            -[#595959,dashed]->  Vector            : "«create»"
Main               -[#595959,dashed]->  Lambert           : "«create»"
Main               -[#595959,dashed]->  Normal            : "«create»"
Main               -[#595959,dashed]->  Parser            : "«create»"
Normal             -[#595959,dashed]->  Color             : "«create»"
Normal             -[#008200,dashed]-^  ICalculStrategy   
Normal            "1" *-[#595959,plain]-> "scene\n1" Scene             
Normal             -[#595959,dashed]->  Vector            : "«create»"
Parser            "1" *-[#595959,plain]-> "cameras\n*" Camera            
Parser             -[#595959,dashed]->  Camera            : "«create»"
Parser             -[#595959,dashed]->  Color             : "«create»"
Parser            "1" *-[#595959,plain]-> "colors\n*" Color             
Parser             -[#595959,dashed]->  ColorDamier       : "«create»"
Parser            "1" *-[#595959,plain]-> "colorDamier\n1" ColorDamier       
Parser             -[#595959,dashed]->  ColorUnie         : "«create»"
Parser             -[#595959,dashed]->  DirectionalLight  : "«create»"
Parser            "1" *-[#595959,plain]-> "diffuse\n*" IColorStrategy    
Parser            "1" *-[#595959,plain]-> "listLights\n*" ILight            
Parser            "1" *-[#595959,plain]-> "diffuse\n*" IObjetScene       
Parser             -[#595959,dashed]->  Image             : "«create»"
Parser            "1" *-[#595959,plain]-> "image\n*" Image             
Parser            "1" *-[#595959,plain]-> "plans\n*" Plan              
Parser             -[#595959,dashed]->  Plan              : "«create»"
Parser            "1" *-[#595959,plain]-> "points\n*" Point             
Parser             -[#595959,dashed]->  Point             : "«create»"
Parser             -[#595959,dashed]->  PonctualLight     : "«create»"
Parser             -[#595959,dashed]->  SceneBuilder      : "«create»"
Parser            "1" *-[#595959,plain]-> "sb\n1" SceneBuilder      
Parser             -[#595959,dashed]->  Sphere            : "«create»"
Parser            "1" *-[#595959,plain]-> "spheres\n*" Sphere            
Parser             -[#595959,dashed]->  Triangle          : "«create»"
Parser            "1" *-[#595959,plain]-> "triangles\n*" Triangle          
Parser            "1" *-[#595959,plain]-> "TCamera\n*" Triplet           
Parser             -[#595959,dashed]->  Triplet           : "«create»"
Parser             -[#595959,dashed]->  Vector            : "«create»"
Plan               -[#008200,dashed]-^  IObjetScene       
Plan              "1" *-[#595959,plain]-> "origine\n1" Point             
Plan              "1" *-[#595959,plain]-> "normal\n1" Vector            
Plan               -[#595959,dashed]->  Vector            : "«create»"
Point              -[#595959,dashed]->  Triplet           : "«create»"
Point             "1" *-[#595959,plain]-> "triplet\n1" Triplet           
Point              -[#595959,dashed]->  Vector            : "«create»"
PonctualLight     "1" *-[#595959,plain]-> "color\n1" Color             
PonctualLight      -[#008200,dashed]-^  ILight            
PonctualLight     "1" *-[#595959,plain]-> "position\n1" Point             
Scene             "1" *-[#595959,plain]-> "camera\n1" Camera            
Scene             "1" *-[#595959,plain]-> "colors\n*" Color             
Scene             "1" *-[#595959,plain]-> "objets\n*" IColorStrategy    
Scene             "1" *-[#595959,plain]-> "lights\n*" ILight            
Scene             "1" *-[#595959,plain]-> "objets\n*" IObjetScene       
Scene             "1" *-[#595959,plain]-> "image\n1" Image             
SceneBuilder       -[#008200,dashed]-^  Builder           
SceneBuilder      "1" *-[#595959,plain]-> "camera\n1" Camera            
SceneBuilder      "1" *-[#595959,plain]-> "colors\n*" Color             
SceneBuilder      "1" *-[#595959,plain]-> "objets\n*" IColorStrategy    
SceneBuilder      "1" *-[#595959,plain]-> "lights\n*" ILight            
SceneBuilder      "1" *-[#595959,plain]-> "objets\n*" IObjetScene       
SceneBuilder      "1" *-[#595959,plain]-> "image\n1" Image             
SceneBuilder       -[#595959,dashed]->  Scene             : "«create»"
Shadow             -[#595959,dashed]->  DeactivateShadows : "«create»"
Shadow            "1" *-[#595959,plain]-> "state\n1" IShadowState      
Sphere            "1" *-[#595959,plain]-> "color\n1" Color             
Sphere             -[#008200,dashed]-^  IObjetScene       
Sphere            "1" *-[#595959,plain]-> "origine\n1" Point             
Triangle           -[#008200,dashed]-^  IObjetScene       
Triangle           -[#595959,dashed]->  Plan              : "«create»"
Triangle          "1" *-[#595959,plain]-> "origine\n1" Point             
Triangle           -[#595959,dashed]->  Vector            : "«create»"
Vector             -[#595959,dashed]->  Point             : "«create»"
Vector            "1" *-[#595959,plain]-> "triplet\n1" Triplet           
Vector             -[#595959,dashed]->  Triplet           : "«create»"
@enduml
